Trabalho de SAD
Aluno: Rafael Prado   Matrícula: 0050010591
Professor: Alex Salgado


1 -  importar os modulos python para machine learn e carregar o arquivo fruit_data_with_colors2.xlsx usando o método read_excel do pandas:

%matplotlib notebook
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
fruits = pd.read_excel('fruit_data_with_colors2.xlsx')


2 - Exibir os primeiros registros desta tabela
fruits.head()


3.1 - Quantas observações têm nessa base de dados?
print(fruits.sample)


3.2 - Quantas "features" têm nessa base de dados?
print(fruits.columns) 


4.1 - Quantas respostas temos nessa base?
print(fruits.target)


4.2 - Para fazer nossas previsões em cima desta base, devemos usar algoritmo de Classificação ou Regressão?

Regressão.


5 - Como você pode gerar a matriz X de feature e o vetor y de respostas? Dica: use essas 3 features para X ['mass', 'width', 'height'] e a resposta deve ser ['fruit_label']:

lookup_fruit_name = dict(zip(fruits.fruit_label.unique(), fruits.fruit_name.unique()))
lookup_fruit_name
x = fruits[['mass', 'width', 'height']]
y = fruits['fruit_label']


6.1 - Usando o algoritmo de KNN (com 1 vizinho, k=1), qual a previsão? Adivinhe qual é a fruta com massa 20g, largura 4.3 cm, altura 5.5 cm, ou seja, com as seguintes features (mass = 20, width=4.3, height=5.5):

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)
print(knn)
knn.fit(X, y)
knn.predict([[mass=20, width=4.3, height=5.5]])


6.2 - Agora faça a mesma previsão, usando os seguintes algoritmos: 6.2 - KNN(k=5):

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X, y)
knn.predict(X_new)


7 - Usando o método de avaliação de acurácia (Treinar e testar na base de dados inteira), qual dos 3 métodos do item 6 é mais eficiente?
Logistic Regression.
 

7.1 - Acurácia usando o algoritmo de KNN (com 1 vizinho, k=1):
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X, 1)
y_pred = knn.predict(x)
print(metrics.accuracy_score(y, y_pred))


7.2 - Acurácia usando o algoritmo de KNN (com 5 vizinho, k=5):
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X, 5)
y_pred = knn.predict(x)
print(metrics.accuracy_score(y, y_pred))


8.1 - Acurácia usando o algoritmo de KNN (com 1 vizinho, k=1)
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(metrics.accuracy_score(y_test, y_pred))


8.2 - Acurácia usando o algoritmo de KNN (com 5 vizinho, k=5)
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(metrics.accuracy_score(y_test, y_pred))


8.3 - Acurácia usando o algoritmo de LogisticRegression:
logreg = LogisticRegression()
logreg.fit(X_train, y_train)


9.1 - Faça um programa python para testar diferentes valores de K entre 1 e 25 e diga através de gráfico, qual foi o melhor valor de K que obteve a melhor performance?

k_range = list(range(1, 25))
scores = []
for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    scores.append(metrics.accuracy_score(y_test, y_pred))



9.2 - Utilizando este seu último ajuste de K, faça novamente a seguinte previsão. Adivinhe qual é a fruta com massa 20g, largura 4.3 cm, altura 5.5 cm, ou seja, com as seguintes features (mass = 20, width=4.3, height=5.5:

knn = KNeighborsClassifier(n_neighbors=11)
knn.fit(X, y)
knn.predict([[20, 4.3, 5.5]])
